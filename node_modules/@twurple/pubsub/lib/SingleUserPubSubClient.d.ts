import type { LoggerOptions } from '@d-fischer/logger';
import type { AuthProvider } from '@twurple/auth';
import type { UserIdResolvable } from '@twurple/common';
import { BasicPubSubClient } from './BasicPubSubClient';
import { PubSubAutoModQueueMessage } from './messages/PubSubAutoModQueueMessage';
import { PubSubBitsBadgeUnlockMessage } from './messages/PubSubBitsBadgeUnlockMessage';
import { PubSubBitsMessage } from './messages/PubSubBitsMessage';
import { PubSubChatModActionMessage } from './messages/PubSubChatModActionMessage';
import { PubSubCustomMessage } from './messages/PubSubCustomMessage';
import { PubSubRedemptionMessage } from './messages/PubSubRedemptionMessage';
import { PubSubSubscriptionMessage } from './messages/PubSubSubscriptionMessage';
import { PubSubWhisperMessage } from './messages/PubSubWhisperMessage';
import { PubSubListener } from './PubSubListener';
/**
 * Options for creating the single-user PubSub client.
 */
export interface SingleUserPubSubClientOptions {
    /**
     * The {@AuthProvider} instance to use for token management.
     */
    authProvider: AuthProvider;
    /**
     * The underlying {@BasicPubSubClient} instance. If not given, we'll create a new one.
     *
     * **WARNING:** If you pass this, you shouldn't execute any manual actions on it.
     * You can, however, pass the same client to multiple instances of {@SingleUserPubSubClient}.
     */
    pubSubClient?: BasicPubSubClient;
    /**
     * Options to pass to the logger.
     */
    logger?: Partial<LoggerOptions>;
}
/**
 * A higher level PubSub client attached to a single user.
 */
export declare class SingleUserPubSubClient {
    private readonly _authProvider;
    private readonly _pubSubClient;
    private readonly _listeners;
    private _userId?;
    /**
     * Creates a new Twitch PubSub client.
     *
     * @expandParams
     */
    constructor({ authProvider, pubSubClient, logger }: SingleUserPubSubClientOptions);
    /**
     * Adds a listener to AutoMod queue events to the client.
     *
     * @param channel The channel to listen to.
     * @param callback A function to be called when an AutoMod queue event is sent to the user.
     *
     * It receives a {@PubSubAutoModQueueMessage} object.
     */
    onAutoModQueue(channel: UserIdResolvable, callback: (message: PubSubAutoModQueueMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to bits events to the client.
     *
     * @param callback A function to be called when a bits event happens in the user's channel.
     *
     * It receives a {@PubSubBitsMessage} object.
     */
    onBits(callback: (message: PubSubBitsMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to bits badge unlock events to the client.
     *
     * @param callback A function to be called when a bit badge is unlocked in the user's channel.
     *
     * It receives a {@PubSubBitsBadgeUnlockMessage} object.
     */
    onBitsBadgeUnlock(callback: (message: PubSubBitsBadgeUnlockMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to mod action events to the client.
     *
     * @param channel The channel to listen to.
     * @param callback A function to be called when a mod action event is sent to the user.
     *
     * It receives a {@PubSubChatModActionMessage} object.
     */
    onModAction(channel: UserIdResolvable, callback: (message: PubSubChatModActionMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to redemption events to the client.
     *
     * @param callback A function to be called when a channel point reward is redeemed in the user's channel.
     *
     * It receives a {@PubSubRedemptionMessage} object.
     */
    onRedemption(callback: (message: PubSubRedemptionMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to user moderation events to the client.
     *
     * @param channel The channel to listen to.
     * @param callback A function to be called when a user moderation event is sent to the user.
     *
     * It receives a {@PubSubUserModerationNotificationMessage} object.
     */
    onUserModeration(channel: UserIdResolvable, callback: (message: PubSubSubscriptionMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to subscription events to the client.
     *
     * @param callback A function to be called when a subscription event happens in the user's channel.
     *
     * It receives a {@PubSubSubscriptionMessage} object.
     */
    onSubscription(callback: (message: PubSubSubscriptionMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to whisper events to the client.
     *
     * @param callback A function to be called when a whisper is sent to the user.
     *
     * It receives a {@PubSubWhisperMessage} object.
     */
    onWhisper(callback: (message: PubSubWhisperMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener for arbitrary/undocumented events to the client.
     *
     * @param topic The topic to subscribe to.
     * @param callback A function to be called when a custom event is sent to the user.
     *
     * It receives a {@PubSubCustomMessage} object.
     * @param scope An optional scope if the topic requires it.
     * @param channelId The ID of the channel to listen to, if the topic requires it.
     */
    onCustomTopic(topic: string, callback: (message: PubSubCustomMessage) => void, scope?: string, channelId?: UserIdResolvable): Promise<PubSubListener<never>>;
    /**
     * Removes a listener from the client.
     *
     * @param listener A listener returned by one of the `add*Listener` methods.
     */
    removeListener(listener: PubSubListener<never>): Promise<void>;
    private static _parseMessage;
    private _getUserId;
    private _addListener;
}
//# sourceMappingURL=SingleUserPubSubClient.d.ts.map